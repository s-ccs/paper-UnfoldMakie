---
title: 'UnfoldMakie.jl: A Julia package for ERP visualization'

tags:
  - Julia
  - Event-related potentials
  - visualization
  - interactivity 
  - user study
authors:
  - name: Vladimir Mikheev
    orcid: 0000-0002-4738-6655
    equal-contrib: true
    affiliation: 1
  - name: Benedikt Ehinger
    orcid: 0000-0002-6276-3332
    equal-contrib: true
    affiliation: "1, 2"
affiliations:
 - name: University of Stuttgart, Institute for Visualization and Interactive Systems, Germany
   index: 1
 - name: University of Stuttgart, Stuttgart Center for Simulation Science, Germany
   index: 2

date: 30 October 2024
bibliography: paper.bib

---


= Statement of need

`UnfoldMakie.jl` is a Julia package for visualization of electroencephalography (EEG), with a focus on event-related potentials (ERPs), especially regression-ERPs (rERPs). It can accompany Unfold.jl @ehinger2019unfold, a toolbox for regression-ERP analysis, but is also a standalone tool and independent of Unfold.jl). The package is mainly based on the following packages: Makie.jl  @danisch2021makie and AlgebraOfGraphics.jl for visualization, Unfold.jl for regressions, Topoplots.jl for interpolation of topoplots.

UnfoldMakie.jl fills the gap as one of the only dedicated EEG visualization libraries with a focus on speed, ease of use, customization and detailed documentation. At the same time, it still allows explorative analysis (zooming/panning) and vector graphics with publication-ready figures. This is achieved by the modularity of Makie.jl, which allows switching between two backends: CPU-supported vector graphics CairoMakie.jl and GPU-supported interactive GLMakie.jl and WGLMakie.jl. 

Anyone who works with EEG, MEG, ERP, iEEG or other time-series data is a target audience of this package.

In an earlier study @mikheev2024art, we asked novice and expert practitioners for insights into their ERP visualization practices. The result of this user study were used to improve UnfoldMakie.jl.

= Functionality


UnfoldMakie.jl has the following benefits over other ERP visualization toolboxes:
- Fast on first run. Julia allows to plot complex figures fast. For instance, it is able to plot one figure with 50 topoplots in 1.9 seconds (1.6 sec with DelaunayMesh interpolation), which is 18 times faster, compared to MATLAB. Although, it is slower than MNE by 1 second. #footnote[The measurements were done by using BenchmarkTools.jl. @BenchmarkTools.jl-2016 Be aware that results of benchmarking tools can vary each run and depends on a OS, package environment, etc.]
- Fast updating. The main advantage of Julia is the speed with which the numbers are updated. UnfoldMakie.jl can create and save a gif file with 50 timestamps 1.7 times faster than MNE.
- Highly customizable. Modularity of Makie.jl allows creating functions that can be combined with each other. This encourages the creation of new complex plot types. 
- Customizable. The majority of EEG researchers preferred flexibility of coding as the most important feature of the tool. That's why we gave users the flexibility to customize different aspects of the plot. 
- Documented. Extensive documentation with many usage examples and docstrings for each important function is very helpful for users to understand the code.
- Interactive. Several plots in our package are interactive and use Observables.jl, which allows for fast updating of the underlying data.
- Scientific color maps by default. According to our earlier study @mikheev2024art, 40% of EEG researchers do not know about scientific color maps. We set up scientific color maps by default.
- Minimalist. Unlike MNE, UnfoldMakie.jl focuses exclusively on visualizing (r)ERPs, making it easier to understand and maintain.


#figure(
  table(
  columns: (auto, auto, auto),
  inset: 10pt,
  align: horizon,
  table.header(
    [*Languages*], [*Package*], [*Median speed*]
  ),
    [MATLAB],
    [EEGLAB],
    [36 sec],
    [Julia],
    [UnfoldMakie\
    UnfoldMakie with DelaunayMesh interpolation],
    [1.998 sec\
    1.648 sec],
    [Python],
    [MNE],
    [0.826 sec]
),
  caption: [Time benchmarking for topoplot series with 50 topolots in 3 different packages (first run)],
)

#figure(
  table(
  columns: (auto, auto, auto),
  inset: 10pt,
  align: horizon,
  table.header(
    [*Languages*], [*Package*], [*Median speed*]
  ),
    [Julia],
    [UnfoldMakie (.gif)],
    [5.801 sec],
    [Python],
    [MNE (.gif)],
    [9.494 sec]
),
  caption: [Time benchmarking for generation and saving of\ topoplot animation  with 50 timepoint in 2 different packages],
)

We currently support nine general EEG plot types (Figure 1). 
and two Unfold-specific plots: Design matrices and Spline plots.

#figure(
  image("complex_plot.png", width: 80%),
  caption: [8 plots generated by UnfoldMakie.jl. A) ERP plot, B) Butterfly plot, C) Topoplot, D) Topoplot timeseries, E) ERP image @jung1998analyzing, G) Channel image, H) Parallel coordinate plot @ten2006design.],
) <glacier>

= State of the field

There are dozens of libraries for ERP visualization in Python and MATLAB. Most EEG practitioners (82%) have experience with non-visualization specific MATLAB-based tools like EEGLAB @delorme2004eeglab, FieldTrip @oostenveld2011fieldtrip, ERPLAB @lopez2014erplab and Brainstorm @tadel2019meg. Also worth mentioning is EEGVIS @ehigner_2018eegvis. 

The Python-based MNE @Gramfort_MEG_and_EEG_2013 (41%) and the commercial software Brain Vision Analyzer (22%) also showed significant use. Custom scripts written in programming languages such as R, Python, Julia are also quite popular (42%).

There are not many EEG/ERP visualization libraries on Julia. Currently, we could find NeuroAnalyzer.jl @Wysokinski_NeuroAnalyzer, EEGToolkit.jl @Pereyra_EEGToolkit, Neuroimaging.jl @Luke_Neuroimaging. However, they are more focused on the analysis of raw EEG data, while our package is more specialized on the visualization of ERPs and rERPs. There are also #link("https://julianeuro.github.io/packages")[traces] of many abandoned projects.

= Funding
Funded by the Deutsche Forschungsgemeinschaft (DG, German Research Foundation) – Project-ID 251654672 – TRR 161.

= Acknowledgements

We acknowledge contributions from Daniel Baumgartner, Niklas Gärtner, Soren Doring, Fadil Furkan Lokman, Judith Schepers, René Skukies. 

#bibliography("paper.bib")


